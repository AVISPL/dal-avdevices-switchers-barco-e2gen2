name: Java CI

on:
  push:
    branches: # reacting on push action to the following branches
      - develop
      - 'feature/**'

jobs:
  prep: # preparation job, retrieving current version from pom and the shortrev from git
    runs-on: ubuntu-latest #self-hosted with default scope will not pick up public repos
    outputs:
      rev: ${{ steps.shortrev.outputs.rev }}
      ver: ${{ steps.pversion.outputs.ver }}
      date: ${{ steps.date.outputs.date }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 1.8 & run tests & generate artifacts
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 8
          overwrite-settings: false
      - id: date
        run: echo "date=$(date +'%y%m%d' | cut -c 2-)" >> $GITHUB_OUTPUT
      - id: shortrev
        run: echo "rev=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - id: pversion # retrieving the maven version and removing -SNAPSHOT if it is present
        run: echo "ver=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout| sed -e 's/-SNAPSHOT//g')" >> $GITHUB_OUTPUT
  versiongenerate:
    runs-on: ubuntu-latest
    needs: prep
    outputs:
      version: ${{ steps.version.outputs.version }} # creating a 'version' variable
    steps:
      - id: version
        run: echo "version=${{ needs.prep.outputs.ver }}-${{ needs.prep.outputs.date }}-${{ needs.prep.outputs.rev }}" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs: versiongenerate
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 1.8 & run tests & generate artifacts
        uses: actions/setup-java@v3
        with:
          distribution: adopt
          java-version: 8
          overwrite-settings: false
      - name: Version set # setting new version in POM file
        run: mvn versions:set versions:commit -DnewVersion=${{ needs.versiongenerate.outputs.version }}
      - name: Build and test with Maven # running maven build with any specific parameters
        run: mvn -B clean test install -Dgroups="test"
      - name: PMD check # running static code analysis
        run: mvn pmd:check
      - id: getfilename # retrieving full artifact path
        run: echo "file=$(ls target/symphony-dal-communicator-barco-e2gen2-${{ needs.versiongenerate.outputs.version }}.jar)" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v3 # uploading the artifact file
        with:
          name: BarcoE2Gen2
          path: ${{ steps.getfilename.outputs.file }}